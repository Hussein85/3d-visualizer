# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET    /                             @controllers.Application.index
# Rewrite to CRUD
GET    /tags                         @controllers.ModelController.tags(query: String)
GET    /tags/model/:modelId          @controllers.TagController.tag(modelId: Int)
POST   /language                     @controllers.Application.language

# Model
GET    /model                        @controllers.ModelController.getPublished
GET    /model/unpublished            @controllers.ModelController.unpublished
POST   /model                        @controllers.ModelController.upload
GET    /model/:id                    @controllers.ModelController.get(id: Int)
PUT    /model/:id/published          @controllers.ModelController.setPublished(id: Int, published: Boolean)
GET    /model/alltags                @controllers.ModelController.allTags

# Files
GET    /file/:id                     @controllers.FileController.get(id: String)
POST   /file                         @controllers.FileController.post
GET    /file/model/:modelId          @controllers.FileController.getModelFiles(modelId: Int)
PUT    /file/acc/:id                 @controllers.FileController.acc(id: String)

# Users
GET    /user                         @controllers.Admin.users
GET    /user/logedIn                 @controllers.UserController.loggedIn
PUT    /user/:email                  @controllers.Admin.updateUser(email)

# Organizations
GET    /api-docs/organization        controllers.ApiHelpController.getResource(path = "/organization")
GET    /organization                 @controllers.OrganizationController.organizations
POST   /organization                 @controllers.OrganizationController.newOrganization

#
GET    /role                         @controllers.Admin.roles

# Swagger REST-API Documentation
GET    /api-docs                     controllers.ApiHelpController.getResources
GET    /swagger                      controllers.Default.redirect(to="assets/swagger/index.html")

# Map static resources from the /public folder to the /assets URL path
GET    /assets/*file                 controllers.Assets.at(path="/public", file)
GET    /securedassets/*file          @controllers.Application.securedAsset(file)

# Map static resources from the /upload folder to the /uploads URL path
GET    /uploads/*file                @controllers.Application.getUploadedFile(file)

# Enable webjar based resources to be returned
GET    /webjars/*file                controllers.WebJarAssets.at(file)

GET    /javascriptRoutes             @controllers.Application.javascriptRoutes

GET    /assets/*file                 controllers.Assets.at(path="/public", file)

# Login page
GET    /login                        @securesocial.controllers.LoginPage.login
GET    /logout                       @securesocial.controllers.LoginPage.logout

# Registration routes
GET    /signup                       @securesocial.controllers.Registration.startSignUp
POST   /signup                       @securesocial.controllers.Registration.handleStartSignUp
GET    /signup/:mailToken            @securesocial.controllers.Registration.signUp(mailToken)
POST   /signup/:mailToken            @securesocial.controllers.Registration.handleSignUp(mailToken)

# Reset password
GET    /reset                        @securesocial.controllers.PasswordReset.startResetPassword
POST   /reset                        @securesocial.controllers.PasswordReset.handleStartResetPassword
GET    /reset/:mailToken             @securesocial.controllers.PasswordReset.resetPassword(mailToken)
POST   /reset/:mailToken             @securesocial.controllers.PasswordReset.handleResetPassword(mailToken)

# Change Password
GET    /password                     @securesocial.controllers.PasswordChange.page
POST   /password                     @securesocial.controllers.PasswordChange.handlePasswordChange


# Authentication entry points for all providers
GET    /authenticate/:provider       @securesocial.controllers.ProviderController.authenticate(provider, redirectTo: Option[String])
POST   /authenticate/:provider       @securesocial.controllers.ProviderController.authenticateByPost(provider, redirectTo: Option[String])

POST   /api/authenticate/:provider   @securesocial.controllers.LoginApi.authenticate(provider, builder = "token")
